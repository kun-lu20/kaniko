name: Build images on push to master

on:
  push:
    tags:
    - 'v[0-9]+.[0-9]+.[0-9]+*'

jobs:
  build-executor:
    env:
      GITHUB_SHA: ${{ github.sha }}
      GITHUB_REF: ${{ github.ref }}
      PLATFORMS: "linux/amd64,linux/arm64,linux/ppc64le,linux/s390x"
    runs-on: ubuntu-latest
    steps:
    - name: Clone source code
      uses: actions/checkout@v2

    - name: Get the tags
      id: vars
      run: echo ::set-output name=tag::${GITHUB_REF/refs\/tags\//}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
      with:
        platforms: ${{ env.PLATFORMS }}

    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1
      with:
        version: latest
    
    - name: Login to DockerHub
      uses: docker/login-action@v1 
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - uses: docker/build-push-action@v2
      with:
        context: .
        file: ./deploy/Dockerfile_slim
        platforms: linux/amd64,linux/arm64,linux/ppc64le,linux/s390x
        push: true
        tags: |
          kunlu20/kaniko-project/executor:${{ env.GITHUB_SHA }}-slim
          kunlu20/kaniko-project/executor:${{ steps.vars.outputs.tag }}-slim
          kunlu20/kaniko-project/executor:slim

    - uses: docker/build-push-action@v2
      with:
        context: .
        file: ./deploy/Dockerfile
        platforms: linux/amd64,linux/arm64,linux/ppc64le,linux/s390x
        push: true
        tags: |
          kunlu20/kaniko-project/executor:${{ env.GITHUB_SHA }}
          kunlu20/kaniko-project/executor:${{ steps.vars.outputs.tag }}
          kunlu20/kaniko-project/executor:latest
    
    - name: Sign images 
      uses: sigstore/cosign-installer@main
      with:
        cosign-release: 'v0.2.0'
    
    # Use cosign to sign the images
    - run: |
        export KMS_VAL=gcpkms://projects/kaniko-project/locations/global/keyRings/cosign/cryptoKeys/cosign
        cosign sign -kms $KMS_VAL kunlu20/kaniko-project/executor:${{ env.GITHUB_SHA }}-slim  
        cosign sign -kms $KMS_VAL kunlu20/kaniko-project/executor:${{ steps.vars.outputs.tag }}-slim 
        cosign sign -kms $KMS_VAL kunlu20/kaniko-project/executor:slim  

        cosign sign -kms $KMS_VAL kunlu20/kaniko-project/executor:${{ env.GITHUB_SHA }}
        cosign sign -kms $KMS_VAL kunlu20/kaniko-project/executor:${{ steps.vars.outputs.tag }}
        cosign sign -kms $KMS_VAL kunlu20/kaniko-project/executor:latest  

  build-debug:
    env:
      GITHUB_SHA: ${{ github.sha }}
      GITHUB_REF: ${{ github.ref }}
      PLATFORMS: "linux/amd64,linux/arm64,linux/ppc64le,linux/s390x"
    runs-on: ubuntu-latest
    steps:
    - name: Clone source code
      uses: actions/checkout@v2

    - name: Get the tags
      id: vars
      run: echo ::set-output name=tag::${GITHUB_REF/refs\/tags\//}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
      with:
        platforms: ${{ env.PLATFORMS }}

    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1
      with:
        version: latest

    - name: Login to DockerHub
      uses: docker/login-action@v1 
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - uses: docker/build-push-action@v2
      with:
        context: .
        file:  ./deploy/Dockerfile_debug
        platforms: linux/amd64,linux/arm64,linux/ppc64le,linux/s390x
        push: true
        tags: |
          kunlu20/kaniko-project/executor:${{ env.GITHUB_SHA }}-debug
          kunlu20/kaniko-project/executor:${{ steps.vars.outputs.tag }}-debug
          kunlu20/kaniko-project/executor:debug

    - name: Sign images 
      uses: sigstore/cosign-installer@main
      with:
        cosign-release: 'v0.2.0'
      
      # Use cosign to sign the images
    - run: |
        export KMS_VAL=gcpkms://projects/kaniko-project/locations/global/keyRings/cosign/cryptoKeys/cosign
        cosign sign -kms $KMS_VAL kunlu20/kaniko-project/executor:${{ env.GITHUB_SHA }}-debug
        cosign sign -kms $KMS_VAL kunlu20/kaniko-project/executor:${{ steps.vars.outputs.tag }}-debug
        cosign sign -kms $KMS_VAL kunlu20/kaniko-project/executor:debug

  build-warmer:
    env:
      GITHUB_SHA: ${{ github.sha }}
      GITHUB_REF: ${{ github.ref }}
      PLATFORMS: "linux/amd64,linux/arm64,linux/ppc64le,linux/s390x"
    runs-on: ubuntu-latest
    steps:
    - name: Clone source code
      uses: actions/checkout@v2

    - name: Get the tags
      id: vars
      run: echo ::set-output name=tag::${GITHUB_REF/refs\/tags\//}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
      with:
        platforms: ${{ env.PLATFORMS }}

    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1
      with:
        version: latest

    - name: Login to DockerHub
      uses: docker/login-action@v1 
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - uses: docker/build-push-action@v2
      with:
        context: .
        file: ./deploy/Dockerfile_warmer
        platforms: linux/amd64,linux/arm64,linux/ppc64le,linux/s390x
        push: true
        tags: |
          kunlu20/kaniko-project/warmer:${{ env.GITHUB_SHA }}
          kunlu20/kaniko-project/warmer:${{ steps.vars.outputs.tag }}
          kunlu20/kaniko-project/warmer:latest

    - name: Sign images 
      uses: sigstore/cosign-installer@main
      with:
        cosign-release: 'v0.2.0'

      # Use cosign to sign the images
    - run: |
        export KMS_VAL=gcpkms://projects/kaniko-project/locations/global/keyRings/cosign/cryptoKeys/cosign
        cosign sign -kms $KMS_VAL kunlu20/kaniko-project/warmer:${{ env.GITHUB_SHA }}
        cosign sign -kms $KMS_VAL kunlu20/kaniko-project/warmer:${{ steps.vars.outputs.tag }}
        cosign sign -kms $KMS_VAL kunlu20/kaniko-project/warmer:latest
